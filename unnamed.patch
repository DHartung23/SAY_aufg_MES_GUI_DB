Index: .venv/Lib/site-packages/pip/_vendor/pygments/formatters/terminal.py
===================================================================
diff --git a/.venv/Lib/site-packages/pip/_vendor/pygments/formatters/terminal.py b/.venv/Lib/site-packages/pip/_vendor/pygments/formatters/terminal.py
deleted file mode 100644
--- a/.venv/Lib/site-packages/pip/_vendor/pygments/formatters/terminal.py	
+++ /dev/null	
@@ -1,127 +0,0 @@
-"""
-    pygments.formatters.terminal
-    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-
-    Formatter for terminal output with ANSI sequences.
-
-    :copyright: Copyright 2006-2023 by the Pygments team, see AUTHORS.
-    :license: BSD, see LICENSE for details.
-"""
-
-from pip._vendor.pygments.formatter import Formatter
-from pip._vendor.pygments.token import Keyword, Name, Comment, String, Error, \
-    Number, Operator, Generic, Token, Whitespace
-from pip._vendor.pygments.console import ansiformat
-from pip._vendor.pygments.util import get_choice_opt
-
-
-__all__ = ['TerminalFormatter']
-
-
-#: Map token types to a tuple of color values for light and dark
-#: backgrounds.
-TERMINAL_COLORS = {
-    Token:              ('',            ''),
-
-    Whitespace:         ('gray',   'brightblack'),
-    Comment:            ('gray',   'brightblack'),
-    Comment.Preproc:    ('cyan',        'brightcyan'),
-    Keyword:            ('blue',    'brightblue'),
-    Keyword.Type:       ('cyan',        'brightcyan'),
-    Operator.Word:      ('magenta',      'brightmagenta'),
-    Name.Builtin:       ('cyan',        'brightcyan'),
-    Name.Function:      ('green',   'brightgreen'),
-    Name.Namespace:     ('_cyan_',      '_brightcyan_'),
-    Name.Class:         ('_green_', '_brightgreen_'),
-    Name.Exception:     ('cyan',        'brightcyan'),
-    Name.Decorator:     ('brightblack',    'gray'),
-    Name.Variable:      ('red',     'brightred'),
-    Name.Constant:      ('red',     'brightred'),
-    Name.Attribute:     ('cyan',        'brightcyan'),
-    Name.Tag:           ('brightblue',        'brightblue'),
-    String:             ('yellow',       'yellow'),
-    Number:             ('blue',    'brightblue'),
-
-    Generic.Deleted:    ('brightred',        'brightred'),
-    Generic.Inserted:   ('green',  'brightgreen'),
-    Generic.Heading:    ('**',         '**'),
-    Generic.Subheading: ('*magenta*',   '*brightmagenta*'),
-    Generic.Prompt:     ('**',         '**'),
-    Generic.Error:      ('brightred',        'brightred'),
-
-    Error:              ('_brightred_',      '_brightred_'),
-}
-
-
-class TerminalFormatter(Formatter):
-    r"""
-    Format tokens with ANSI color sequences, for output in a text console.
-    Color sequences are terminated at newlines, so that paging the output
-    works correctly.
-
-    The `get_style_defs()` method doesn't do anything special since there is
-    no support for common styles.
-
-    Options accepted:
-
-    `bg`
-        Set to ``"light"`` or ``"dark"`` depending on the terminal's background
-        (default: ``"light"``).
-
-    `colorscheme`
-        A dictionary mapping token types to (lightbg, darkbg) color names or
-        ``None`` (default: ``None`` = use builtin colorscheme).
-
-    `linenos`
-        Set to ``True`` to have line numbers on the terminal output as well
-        (default: ``False`` = no line numbers).
-    """
-    name = 'Terminal'
-    aliases = ['terminal', 'console']
-    filenames = []
-
-    def __init__(self, **options):
-        Formatter.__init__(self, **options)
-        self.darkbg = get_choice_opt(options, 'bg',
-                                     ['light', 'dark'], 'light') == 'dark'
-        self.colorscheme = options.get('colorscheme', None) or TERMINAL_COLORS
-        self.linenos = options.get('linenos', False)
-        self._lineno = 0
-
-    def format(self, tokensource, outfile):
-        return Formatter.format(self, tokensource, outfile)
-
-    def _write_lineno(self, outfile):
-        self._lineno += 1
-        outfile.write("%s%04d: " % (self._lineno != 1 and '\n' or '', self._lineno))
-
-    def _get_color(self, ttype):
-        # self.colorscheme is a dict containing usually generic types, so we
-        # have to walk the tree of dots.  The base Token type must be a key,
-        # even if it's empty string, as in the default above.
-        colors = self.colorscheme.get(ttype)
-        while colors is None:
-            ttype = ttype.parent
-            colors = self.colorscheme.get(ttype)
-        return colors[self.darkbg]
-
-    def format_unencoded(self, tokensource, outfile):
-        if self.linenos:
-            self._write_lineno(outfile)
-
-        for ttype, value in tokensource:
-            color = self._get_color(ttype)
-
-            for line in value.splitlines(True):
-                if color:
-                    outfile.write(ansiformat(color, line.rstrip('\n')))
-                else:
-                    outfile.write(line.rstrip('\n'))
-                if line.endswith('\n'):
-                    if self.linenos:
-                        self._write_lineno(outfile)
-                    else:
-                        outfile.write('\n')
-
-        if self.linenos:
-            outfile.write("\n")
Index: .venv/Lib/site-packages/pip/_vendor/six.py
===================================================================
diff --git a/.venv/Lib/site-packages/pip/_vendor/six.py b/.venv/Lib/site-packages/pip/_vendor/six.py
deleted file mode 100644
--- a/.venv/Lib/site-packages/pip/_vendor/six.py	
+++ /dev/null	
@@ -1,998 +0,0 @@
-# Copyright (c) 2010-2020 Benjamin Peterson
-#
-# Permission is hereby granted, free of charge, to any person obtaining a copy
-# of this software and associated documentation files (the "Software"), to deal
-# in the Software without restriction, including without limitation the rights
-# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
-# copies of the Software, and to permit persons to whom the Software is
-# furnished to do so, subject to the following conditions:
-#
-# The above copyright notice and this permission notice shall be included in all
-# copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
-# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
-# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
-# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
-# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
-# SOFTWARE.
-
-"""Utilities for writing code that runs on Python 2 and 3"""
-
-from __future__ import absolute_import
-
-import functools
-import itertools
-import operator
-import sys
-import types
-
-__author__ = "Benjamin Peterson <benjamin@python.org>"
-__version__ = "1.16.0"
-
-
-# Useful for very coarse version differentiation.
-PY2 = sys.version_info[0] == 2
-PY3 = sys.version_info[0] == 3
-PY34 = sys.version_info[0:2] >= (3, 4)
-
-if PY3:
-    string_types = str,
-    integer_types = int,
-    class_types = type,
-    text_type = str
-    binary_type = bytes
-
-    MAXSIZE = sys.maxsize
-else:
-    string_types = basestring,
-    integer_types = (int, long)
-    class_types = (type, types.ClassType)
-    text_type = unicode
-    binary_type = str
-
-    if sys.platform.startswith("java"):
-        # Jython always uses 32 bits.
-        MAXSIZE = int((1 << 31) - 1)
-    else:
-        # It's possible to have sizeof(long) != sizeof(Py_ssize_t).
-        class X(object):
-
-            def __len__(self):
-                return 1 << 31
-        try:
-            len(X())
-        except OverflowError:
-            # 32-bit
-            MAXSIZE = int((1 << 31) - 1)
-        else:
-            # 64-bit
-            MAXSIZE = int((1 << 63) - 1)
-        del X
-
-if PY34:
-    from importlib.util import spec_from_loader
-else:
-    spec_from_loader = None
-
-
-def _add_doc(func, doc):
-    """Add documentation to a function."""
-    func.__doc__ = doc
-
-
-def _import_module(name):
-    """Import module, returning the module after the last dot."""
-    __import__(name)
-    return sys.modules[name]
-
-
-class _LazyDescr(object):
-
-    def __init__(self, name):
-        self.name = name
-
-    def __get__(self, obj, tp):
-        result = self._resolve()
-        setattr(obj, self.name, result)  # Invokes __set__.
-        try:
-            # This is a bit ugly, but it avoids running this again by
-            # removing this descriptor.
-            delattr(obj.__class__, self.name)
-        except AttributeError:
-            pass
-        return result
-
-
-class MovedModule(_LazyDescr):
-
-    def __init__(self, name, old, new=None):
-        super(MovedModule, self).__init__(name)
-        if PY3:
-            if new is None:
-                new = name
-            self.mod = new
-        else:
-            self.mod = old
-
-    def _resolve(self):
-        return _import_module(self.mod)
-
-    def __getattr__(self, attr):
-        _module = self._resolve()
-        value = getattr(_module, attr)
-        setattr(self, attr, value)
-        return value
-
-
-class _LazyModule(types.ModuleType):
-
-    def __init__(self, name):
-        super(_LazyModule, self).__init__(name)
-        self.__doc__ = self.__class__.__doc__
-
-    def __dir__(self):
-        attrs = ["__doc__", "__name__"]
-        attrs += [attr.name for attr in self._moved_attributes]
-        return attrs
-
-    # Subclasses should override this
-    _moved_attributes = []
-
-
-class MovedAttribute(_LazyDescr):
-
-    def __init__(self, name, old_mod, new_mod, old_attr=None, new_attr=None):
-        super(MovedAttribute, self).__init__(name)
-        if PY3:
-            if new_mod is None:
-                new_mod = name
-            self.mod = new_mod
-            if new_attr is None:
-                if old_attr is None:
-                    new_attr = name
-                else:
-                    new_attr = old_attr
-            self.attr = new_attr
-        else:
-            self.mod = old_mod
-            if old_attr is None:
-                old_attr = name
-            self.attr = old_attr
-
-    def _resolve(self):
-        module = _import_module(self.mod)
-        return getattr(module, self.attr)
-
-
-class _SixMetaPathImporter(object):
-
-    """
-    A meta path importer to import six.moves and its submodules.
-
-    This class implements a PEP302 finder and loader. It should be compatible
-    with Python 2.5 and all existing versions of Python3
-    """
-
-    def __init__(self, six_module_name):
-        self.name = six_module_name
-        self.known_modules = {}
-
-    def _add_module(self, mod, *fullnames):
-        for fullname in fullnames:
-            self.known_modules[self.name + "." + fullname] = mod
-
-    def _get_module(self, fullname):
-        return self.known_modules[self.name + "." + fullname]
-
-    def find_module(self, fullname, path=None):
-        if fullname in self.known_modules:
-            return self
-        return None
-
-    def find_spec(self, fullname, path, target=None):
-        if fullname in self.known_modules:
-            return spec_from_loader(fullname, self)
-        return None
-
-    def __get_module(self, fullname):
-        try:
-            return self.known_modules[fullname]
-        except KeyError:
-            raise ImportError("This loader does not know module " + fullname)
-
-    def load_module(self, fullname):
-        try:
-            # in case of a reload
-            return sys.modules[fullname]
-        except KeyError:
-            pass
-        mod = self.__get_module(fullname)
-        if isinstance(mod, MovedModule):
-            mod = mod._resolve()
-        else:
-            mod.__loader__ = self
-        sys.modules[fullname] = mod
-        return mod
-
-    def is_package(self, fullname):
-        """
-        Return true, if the named module is a package.
-
-        We need this method to get correct spec objects with
-        Python 3.4 (see PEP451)
-        """
-        return hasattr(self.__get_module(fullname), "__path__")
-
-    def get_code(self, fullname):
-        """Return None
-
-        Required, if is_package is implemented"""
-        self.__get_module(fullname)  # eventually raises ImportError
-        return None
-    get_source = get_code  # same as get_code
-
-    def create_module(self, spec):
-        return self.load_module(spec.name)
-
-    def exec_module(self, module):
-        pass
-
-_importer = _SixMetaPathImporter(__name__)
-
-
-class _MovedItems(_LazyModule):
-
-    """Lazy loading of moved objects"""
-    __path__ = []  # mark as package
-
-
-_moved_attributes = [
-    MovedAttribute("cStringIO", "cStringIO", "io", "StringIO"),
-    MovedAttribute("filter", "itertools", "builtins", "ifilter", "filter"),
-    MovedAttribute("filterfalse", "itertools", "itertools", "ifilterfalse", "filterfalse"),
-    MovedAttribute("input", "__builtin__", "builtins", "raw_input", "input"),
-    MovedAttribute("intern", "__builtin__", "sys"),
-    MovedAttribute("map", "itertools", "builtins", "imap", "map"),
-    MovedAttribute("getcwd", "os", "os", "getcwdu", "getcwd"),
-    MovedAttribute("getcwdb", "os", "os", "getcwd", "getcwdb"),
-    MovedAttribute("getoutput", "commands", "subprocess"),
-    MovedAttribute("range", "__builtin__", "builtins", "xrange", "range"),
-    MovedAttribute("reload_module", "__builtin__", "importlib" if PY34 else "imp", "reload"),
-    MovedAttribute("reduce", "__builtin__", "functools"),
-    MovedAttribute("shlex_quote", "pipes", "shlex", "quote"),
-    MovedAttribute("StringIO", "StringIO", "io"),
-    MovedAttribute("UserDict", "UserDict", "collections"),
-    MovedAttribute("UserList", "UserList", "collections"),
-    MovedAttribute("UserString", "UserString", "collections"),
-    MovedAttribute("xrange", "__builtin__", "builtins", "xrange", "range"),
-    MovedAttribute("zip", "itertools", "builtins", "izip", "zip"),
-    MovedAttribute("zip_longest", "itertools", "itertools", "izip_longest", "zip_longest"),
-    MovedModule("builtins", "__builtin__"),
-    MovedModule("configparser", "ConfigParser"),
-    MovedModule("collections_abc", "collections", "collections.abc" if sys.version_info >= (3, 3) else "collections"),
-    MovedModule("copyreg", "copy_reg"),
-    MovedModule("dbm_gnu", "gdbm", "dbm.gnu"),
-    MovedModule("dbm_ndbm", "dbm", "dbm.ndbm"),
-    MovedModule("_dummy_thread", "dummy_thread", "_dummy_thread" if sys.version_info < (3, 9) else "_thread"),
-    MovedModule("http_cookiejar", "cookielib", "http.cookiejar"),
-    MovedModule("http_cookies", "Cookie", "http.cookies"),
-    MovedModule("html_entities", "htmlentitydefs", "html.entities"),
-    MovedModule("html_parser", "HTMLParser", "html.parser"),
-    MovedModule("http_client", "httplib", "http.client"),
-    MovedModule("email_mime_base", "email.MIMEBase", "email.mime.base"),
-    MovedModule("email_mime_image", "email.MIMEImage", "email.mime.image"),
-    MovedModule("email_mime_multipart", "email.MIMEMultipart", "email.mime.multipart"),
-    MovedModule("email_mime_nonmultipart", "email.MIMENonMultipart", "email.mime.nonmultipart"),
-    MovedModule("email_mime_text", "email.MIMEText", "email.mime.text"),
-    MovedModule("BaseHTTPServer", "BaseHTTPServer", "http.server"),
-    MovedModule("CGIHTTPServer", "CGIHTTPServer", "http.server"),
-    MovedModule("SimpleHTTPServer", "SimpleHTTPServer", "http.server"),
-    MovedModule("cPickle", "cPickle", "pickle"),
-    MovedModule("queue", "Queue"),
-    MovedModule("reprlib", "repr"),
-    MovedModule("socketserver", "SocketServer"),
-    MovedModule("_thread", "thread", "_thread"),
-    MovedModule("tkinter", "Tkinter"),
-    MovedModule("tkinter_dialog", "Dialog", "tkinter.dialog"),
-    MovedModule("tkinter_filedialog", "FileDialog", "tkinter.filedialog"),
-    MovedModule("tkinter_scrolledtext", "ScrolledText", "tkinter.scrolledtext"),
-    MovedModule("tkinter_simpledialog", "SimpleDialog", "tkinter.simpledialog"),
-    MovedModule("tkinter_tix", "Tix", "tkinter.tix"),
-    MovedModule("tkinter_ttk", "ttk", "tkinter.ttk"),
-    MovedModule("tkinter_constants", "Tkconstants", "tkinter.constants"),
-    MovedModule("tkinter_dnd", "Tkdnd", "tkinter.dnd"),
-    MovedModule("tkinter_colorchooser", "tkColorChooser",
-                "tkinter.colorchooser"),
-    MovedModule("tkinter_commondialog", "tkCommonDialog",
-                "tkinter.commondialog"),
-    MovedModule("tkinter_tkfiledialog", "tkFileDialog", "tkinter.filedialog"),
-    MovedModule("tkinter_font", "tkFont", "tkinter.font"),
-    MovedModule("tkinter_messagebox", "tkMessageBox", "tkinter.messagebox"),
-    MovedModule("tkinter_tksimpledialog", "tkSimpleDialog",
-                "tkinter.simpledialog"),
-    MovedModule("urllib_parse", __name__ + ".moves.urllib_parse", "urllib.parse"),
-    MovedModule("urllib_error", __name__ + ".moves.urllib_error", "urllib.error"),
-    MovedModule("urllib", __name__ + ".moves.urllib", __name__ + ".moves.urllib"),
-    MovedModule("urllib_robotparser", "robotparser", "urllib.robotparser"),
-    MovedModule("xmlrpc_client", "xmlrpclib", "xmlrpc.client"),
-    MovedModule("xmlrpc_server", "SimpleXMLRPCServer", "xmlrpc.server"),
-]
-# Add windows specific modules.
-if sys.platform == "win32":
-    _moved_attributes += [
-        MovedModule("winreg", "_winreg"),
-    ]
-
-for attr in _moved_attributes:
-    setattr(_MovedItems, attr.name, attr)
-    if isinstance(attr, MovedModule):
-        _importer._add_module(attr, "moves." + attr.name)
-del attr
-
-_MovedItems._moved_attributes = _moved_attributes
-
-moves = _MovedItems(__name__ + ".moves")
-_importer._add_module(moves, "moves")
-
-
-class Module_six_moves_urllib_parse(_LazyModule):
-
-    """Lazy loading of moved objects in six.moves.urllib_parse"""
-
-
-_urllib_parse_moved_attributes = [
-    MovedAttribute("ParseResult", "urlparse", "urllib.parse"),
-    MovedAttribute("SplitResult", "urlparse", "urllib.parse"),
-    MovedAttribute("parse_qs", "urlparse", "urllib.parse"),
-    MovedAttribute("parse_qsl", "urlparse", "urllib.parse"),
-    MovedAttribute("urldefrag", "urlparse", "urllib.parse"),
-    MovedAttribute("urljoin", "urlparse", "urllib.parse"),
-    MovedAttribute("urlparse", "urlparse", "urllib.parse"),
-    MovedAttribute("urlsplit", "urlparse", "urllib.parse"),
-    MovedAttribute("urlunparse", "urlparse", "urllib.parse"),
-    MovedAttribute("urlunsplit", "urlparse", "urllib.parse"),
-    MovedAttribute("quote", "urllib", "urllib.parse"),
-    MovedAttribute("quote_plus", "urllib", "urllib.parse"),
-    MovedAttribute("unquote", "urllib", "urllib.parse"),
-    MovedAttribute("unquote_plus", "urllib", "urllib.parse"),
-    MovedAttribute("unquote_to_bytes", "urllib", "urllib.parse", "unquote", "unquote_to_bytes"),
-    MovedAttribute("urlencode", "urllib", "urllib.parse"),
-    MovedAttribute("splitquery", "urllib", "urllib.parse"),
-    MovedAttribute("splittag", "urllib", "urllib.parse"),
-    MovedAttribute("splituser", "urllib", "urllib.parse"),
-    MovedAttribute("splitvalue", "urllib", "urllib.parse"),
-    MovedAttribute("uses_fragment", "urlparse", "urllib.parse"),
-    MovedAttribute("uses_netloc", "urlparse", "urllib.parse"),
-    MovedAttribute("uses_params", "urlparse", "urllib.parse"),
-    MovedAttribute("uses_query", "urlparse", "urllib.parse"),
-    MovedAttribute("uses_relative", "urlparse", "urllib.parse"),
-]
-for attr in _urllib_parse_moved_attributes:
-    setattr(Module_six_moves_urllib_parse, attr.name, attr)
-del attr
-
-Module_six_moves_urllib_parse._moved_attributes = _urllib_parse_moved_attributes
-
-_importer._add_module(Module_six_moves_urllib_parse(__name__ + ".moves.urllib_parse"),
-                      "moves.urllib_parse", "moves.urllib.parse")
-
-
-class Module_six_moves_urllib_error(_LazyModule):
-
-    """Lazy loading of moved objects in six.moves.urllib_error"""
-
-
-_urllib_error_moved_attributes = [
-    MovedAttribute("URLError", "urllib2", "urllib.error"),
-    MovedAttribute("HTTPError", "urllib2", "urllib.error"),
-    MovedAttribute("ContentTooShortError", "urllib", "urllib.error"),
-]
-for attr in _urllib_error_moved_attributes:
-    setattr(Module_six_moves_urllib_error, attr.name, attr)
-del attr
-
-Module_six_moves_urllib_error._moved_attributes = _urllib_error_moved_attributes
-
-_importer._add_module(Module_six_moves_urllib_error(__name__ + ".moves.urllib.error"),
-                      "moves.urllib_error", "moves.urllib.error")
-
-
-class Module_six_moves_urllib_request(_LazyModule):
-
-    """Lazy loading of moved objects in six.moves.urllib_request"""
-
-
-_urllib_request_moved_attributes = [
-    MovedAttribute("urlopen", "urllib2", "urllib.request"),
-    MovedAttribute("install_opener", "urllib2", "urllib.request"),
-    MovedAttribute("build_opener", "urllib2", "urllib.request"),
-    MovedAttribute("pathname2url", "urllib", "urllib.request"),
-    MovedAttribute("url2pathname", "urllib", "urllib.request"),
-    MovedAttribute("getproxies", "urllib", "urllib.request"),
-    MovedAttribute("Request", "urllib2", "urllib.request"),
-    MovedAttribute("OpenerDirector", "urllib2", "urllib.request"),
-    MovedAttribute("HTTPDefaultErrorHandler", "urllib2", "urllib.request"),
-    MovedAttribute("HTTPRedirectHandler", "urllib2", "urllib.request"),
-    MovedAttribute("HTTPCookieProcessor", "urllib2", "urllib.request"),
-    MovedAttribute("ProxyHandler", "urllib2", "urllib.request"),
-    MovedAttribute("BaseHandler", "urllib2", "urllib.request"),
-    MovedAttribute("HTTPPasswordMgr", "urllib2", "urllib.request"),
-    MovedAttribute("HTTPPasswordMgrWithDefaultRealm", "urllib2", "urllib.request"),
-    MovedAttribute("AbstractBasicAuthHandler", "urllib2", "urllib.request"),
-    MovedAttribute("HTTPBasicAuthHandler", "urllib2", "urllib.request"),
-    MovedAttribute("ProxyBasicAuthHandler", "urllib2", "urllib.request"),
-    MovedAttribute("AbstractDigestAuthHandler", "urllib2", "urllib.request"),
-    MovedAttribute("HTTPDigestAuthHandler", "urllib2", "urllib.request"),
-    MovedAttribute("ProxyDigestAuthHandler", "urllib2", "urllib.request"),
-    MovedAttribute("HTTPHandler", "urllib2", "urllib.request"),
-    MovedAttribute("HTTPSHandler", "urllib2", "urllib.request"),
-    MovedAttribute("FileHandler", "urllib2", "urllib.request"),
-    MovedAttribute("FTPHandler", "urllib2", "urllib.request"),
-    MovedAttribute("CacheFTPHandler", "urllib2", "urllib.request"),
-    MovedAttribute("UnknownHandler", "urllib2", "urllib.request"),
-    MovedAttribute("HTTPErrorProcessor", "urllib2", "urllib.request"),
-    MovedAttribute("urlretrieve", "urllib", "urllib.request"),
-    MovedAttribute("urlcleanup", "urllib", "urllib.request"),
-    MovedAttribute("URLopener", "urllib", "urllib.request"),
-    MovedAttribute("FancyURLopener", "urllib", "urllib.request"),
-    MovedAttribute("proxy_bypass", "urllib", "urllib.request"),
-    MovedAttribute("parse_http_list", "urllib2", "urllib.request"),
-    MovedAttribute("parse_keqv_list", "urllib2", "urllib.request"),
-]
-for attr in _urllib_request_moved_attributes:
-    setattr(Module_six_moves_urllib_request, attr.name, attr)
-del attr
-
-Module_six_moves_urllib_request._moved_attributes = _urllib_request_moved_attributes
-
-_importer._add_module(Module_six_moves_urllib_request(__name__ + ".moves.urllib.request"),
-                      "moves.urllib_request", "moves.urllib.request")
-
-
-class Module_six_moves_urllib_response(_LazyModule):
-
-    """Lazy loading of moved objects in six.moves.urllib_response"""
-
-
-_urllib_response_moved_attributes = [
-    MovedAttribute("addbase", "urllib", "urllib.response"),
-    MovedAttribute("addclosehook", "urllib", "urllib.response"),
-    MovedAttribute("addinfo", "urllib", "urllib.response"),
-    MovedAttribute("addinfourl", "urllib", "urllib.response"),
-]
-for attr in _urllib_response_moved_attributes:
-    setattr(Module_six_moves_urllib_response, attr.name, attr)
-del attr
-
-Module_six_moves_urllib_response._moved_attributes = _urllib_response_moved_attributes
-
-_importer._add_module(Module_six_moves_urllib_response(__name__ + ".moves.urllib.response"),
-                      "moves.urllib_response", "moves.urllib.response")
-
-
-class Module_six_moves_urllib_robotparser(_LazyModule):
-
-    """Lazy loading of moved objects in six.moves.urllib_robotparser"""
-
-
-_urllib_robotparser_moved_attributes = [
-    MovedAttribute("RobotFileParser", "robotparser", "urllib.robotparser"),
-]
-for attr in _urllib_robotparser_moved_attributes:
-    setattr(Module_six_moves_urllib_robotparser, attr.name, attr)
-del attr
-
-Module_six_moves_urllib_robotparser._moved_attributes = _urllib_robotparser_moved_attributes
-
-_importer._add_module(Module_six_moves_urllib_robotparser(__name__ + ".moves.urllib.robotparser"),
-                      "moves.urllib_robotparser", "moves.urllib.robotparser")
-
-
-class Module_six_moves_urllib(types.ModuleType):
-
-    """Create a six.moves.urllib namespace that resembles the Python 3 namespace"""
-    __path__ = []  # mark as package
-    parse = _importer._get_module("moves.urllib_parse")
-    error = _importer._get_module("moves.urllib_error")
-    request = _importer._get_module("moves.urllib_request")
-    response = _importer._get_module("moves.urllib_response")
-    robotparser = _importer._get_module("moves.urllib_robotparser")
-
-    def __dir__(self):
-        return ['parse', 'error', 'request', 'response', 'robotparser']
-
-_importer._add_module(Module_six_moves_urllib(__name__ + ".moves.urllib"),
-                      "moves.urllib")
-
-
-def add_move(move):
-    """Add an item to six.moves."""
-    setattr(_MovedItems, move.name, move)
-
-
-def remove_move(name):
-    """Remove item from six.moves."""
-    try:
-        delattr(_MovedItems, name)
-    except AttributeError:
-        try:
-            del moves.__dict__[name]
-        except KeyError:
-            raise AttributeError("no such move, %r" % (name,))
-
-
-if PY3:
-    _meth_func = "__func__"
-    _meth_self = "__self__"
-
-    _func_closure = "__closure__"
-    _func_code = "__code__"
-    _func_defaults = "__defaults__"
-    _func_globals = "__globals__"
-else:
-    _meth_func = "im_func"
-    _meth_self = "im_self"
-
-    _func_closure = "func_closure"
-    _func_code = "func_code"
-    _func_defaults = "func_defaults"
-    _func_globals = "func_globals"
-
-
-try:
-    advance_iterator = next
-except NameError:
-    def advance_iterator(it):
-        return it.next()
-next = advance_iterator
-
-
-try:
-    callable = callable
-except NameError:
-    def callable(obj):
-        return any("__call__" in klass.__dict__ for klass in type(obj).__mro__)
-
-
-if PY3:
-    def get_unbound_function(unbound):
-        return unbound
-
-    create_bound_method = types.MethodType
-
-    def create_unbound_method(func, cls):
-        return func
-
-    Iterator = object
-else:
-    def get_unbound_function(unbound):
-        return unbound.im_func
-
-    def create_bound_method(func, obj):
-        return types.MethodType(func, obj, obj.__class__)
-
-    def create_unbound_method(func, cls):
-        return types.MethodType(func, None, cls)
-
-    class Iterator(object):
-
-        def next(self):
-            return type(self).__next__(self)
-
-    callable = callable
-_add_doc(get_unbound_function,
-         """Get the function out of a possibly unbound function""")
-
-
-get_method_function = operator.attrgetter(_meth_func)
-get_method_self = operator.attrgetter(_meth_self)
-get_function_closure = operator.attrgetter(_func_closure)
-get_function_code = operator.attrgetter(_func_code)
-get_function_defaults = operator.attrgetter(_func_defaults)
-get_function_globals = operator.attrgetter(_func_globals)
-
-
-if PY3:
-    def iterkeys(d, **kw):
-        return iter(d.keys(**kw))
-
-    def itervalues(d, **kw):
-        return iter(d.values(**kw))
-
-    def iteritems(d, **kw):
-        return iter(d.items(**kw))
-
-    def iterlists(d, **kw):
-        return iter(d.lists(**kw))
-
-    viewkeys = operator.methodcaller("keys")
-
-    viewvalues = operator.methodcaller("values")
-
-    viewitems = operator.methodcaller("items")
-else:
-    def iterkeys(d, **kw):
-        return d.iterkeys(**kw)
-
-    def itervalues(d, **kw):
-        return d.itervalues(**kw)
-
-    def iteritems(d, **kw):
-        return d.iteritems(**kw)
-
-    def iterlists(d, **kw):
-        return d.iterlists(**kw)
-
-    viewkeys = operator.methodcaller("viewkeys")
-
-    viewvalues = operator.methodcaller("viewvalues")
-
-    viewitems = operator.methodcaller("viewitems")
-
-_add_doc(iterkeys, "Return an iterator over the keys of a dictionary.")
-_add_doc(itervalues, "Return an iterator over the values of a dictionary.")
-_add_doc(iteritems,
-         "Return an iterator over the (key, value) pairs of a dictionary.")
-_add_doc(iterlists,
-         "Return an iterator over the (key, [values]) pairs of a dictionary.")
-
-
-if PY3:
-    def b(s):
-        return s.encode("latin-1")
-
-    def u(s):
-        return s
-    unichr = chr
-    import struct
-    int2byte = struct.Struct(">B").pack
-    del struct
-    byte2int = operator.itemgetter(0)
-    indexbytes = operator.getitem
-    iterbytes = iter
-    import io
-    StringIO = io.StringIO
-    BytesIO = io.BytesIO
-    del io
-    _assertCountEqual = "assertCountEqual"
-    if sys.version_info[1] <= 1:
-        _assertRaisesRegex = "assertRaisesRegexp"
-        _assertRegex = "assertRegexpMatches"
-        _assertNotRegex = "assertNotRegexpMatches"
-    else:
-        _assertRaisesRegex = "assertRaisesRegex"
-        _assertRegex = "assertRegex"
-        _assertNotRegex = "assertNotRegex"
-else:
-    def b(s):
-        return s
-    # Workaround for standalone backslash
-
-    def u(s):
-        return unicode(s.replace(r'\\', r'\\\\'), "unicode_escape")
-    unichr = unichr
-    int2byte = chr
-
-    def byte2int(bs):
-        return ord(bs[0])
-
-    def indexbytes(buf, i):
-        return ord(buf[i])
-    iterbytes = functools.partial(itertools.imap, ord)
-    import StringIO
-    StringIO = BytesIO = StringIO.StringIO
-    _assertCountEqual = "assertItemsEqual"
-    _assertRaisesRegex = "assertRaisesRegexp"
-    _assertRegex = "assertRegexpMatches"
-    _assertNotRegex = "assertNotRegexpMatches"
-_add_doc(b, """Byte literal""")
-_add_doc(u, """Text literal""")
-
-
-def assertCountEqual(self, *args, **kwargs):
-    return getattr(self, _assertCountEqual)(*args, **kwargs)
-
-
-def assertRaisesRegex(self, *args, **kwargs):
-    return getattr(self, _assertRaisesRegex)(*args, **kwargs)
-
-
-def assertRegex(self, *args, **kwargs):
-    return getattr(self, _assertRegex)(*args, **kwargs)
-
-
-def assertNotRegex(self, *args, **kwargs):
-    return getattr(self, _assertNotRegex)(*args, **kwargs)
-
-
-if PY3:
-    exec_ = getattr(moves.builtins, "exec")
-
-    def reraise(tp, value, tb=None):
-        try:
-            if value is None:
-                value = tp()
-            if value.__traceback__ is not tb:
-                raise value.with_traceback(tb)
-            raise value
-        finally:
-            value = None
-            tb = None
-
-else:
-    def exec_(_code_, _globs_=None, _locs_=None):
-        """Execute code in a namespace."""
-        if _globs_ is None:
-            frame = sys._getframe(1)
-            _globs_ = frame.f_globals
-            if _locs_ is None:
-                _locs_ = frame.f_locals
-            del frame
-        elif _locs_ is None:
-            _locs_ = _globs_
-        exec("""exec _code_ in _globs_, _locs_""")
-
-    exec_("""def reraise(tp, value, tb=None):
-    try:
-        raise tp, value, tb
-    finally:
-        tb = None
-""")
-
-
-if sys.version_info[:2] > (3,):
-    exec_("""def raise_from(value, from_value):
-    try:
-        raise value from from_value
-    finally:
-        value = None
-""")
-else:
-    def raise_from(value, from_value):
-        raise value
-
-
-print_ = getattr(moves.builtins, "print", None)
-if print_ is None:
-    def print_(*args, **kwargs):
-        """The new-style print function for Python 2.4 and 2.5."""
-        fp = kwargs.pop("file", sys.stdout)
-        if fp is None:
-            return
-
-        def write(data):
-            if not isinstance(data, basestring):
-                data = str(data)
-            # If the file has an encoding, encode unicode with it.
-            if (isinstance(fp, file) and
-                    isinstance(data, unicode) and
-                    fp.encoding is not None):
-                errors = getattr(fp, "errors", None)
-                if errors is None:
-                    errors = "strict"
-                data = data.encode(fp.encoding, errors)
-            fp.write(data)
-        want_unicode = False
-        sep = kwargs.pop("sep", None)
-        if sep is not None:
-            if isinstance(sep, unicode):
-                want_unicode = True
-            elif not isinstance(sep, str):
-                raise TypeError("sep must be None or a string")
-        end = kwargs.pop("end", None)
-        if end is not None:
-            if isinstance(end, unicode):
-                want_unicode = True
-            elif not isinstance(end, str):
-                raise TypeError("end must be None or a string")
-        if kwargs:
-            raise TypeError("invalid keyword arguments to print()")
-        if not want_unicode:
-            for arg in args:
-                if isinstance(arg, unicode):
-                    want_unicode = True
-                    break
-        if want_unicode:
-            newline = unicode("\n")
-            space = unicode(" ")
-        else:
-            newline = "\n"
-            space = " "
-        if sep is None:
-            sep = space
-        if end is None:
-            end = newline
-        for i, arg in enumerate(args):
-            if i:
-                write(sep)
-            write(arg)
-        write(end)
-if sys.version_info[:2] < (3, 3):
-    _print = print_
-
-    def print_(*args, **kwargs):
-        fp = kwargs.get("file", sys.stdout)
-        flush = kwargs.pop("flush", False)
-        _print(*args, **kwargs)
-        if flush and fp is not None:
-            fp.flush()
-
-_add_doc(reraise, """Reraise an exception.""")
-
-if sys.version_info[0:2] < (3, 4):
-    # This does exactly the same what the :func:`py3:functools.update_wrapper`
-    # function does on Python versions after 3.2. It sets the ``__wrapped__``
-    # attribute on ``wrapper`` object and it doesn't raise an error if any of
-    # the attributes mentioned in ``assigned`` and ``updated`` are missing on
-    # ``wrapped`` object.
-    def _update_wrapper(wrapper, wrapped,
-                        assigned=functools.WRAPPER_ASSIGNMENTS,
-                        updated=functools.WRAPPER_UPDATES):
-        for attr in assigned:
-            try:
-                value = getattr(wrapped, attr)
-            except AttributeError:
-                continue
-            else:
-                setattr(wrapper, attr, value)
-        for attr in updated:
-            getattr(wrapper, attr).update(getattr(wrapped, attr, {}))
-        wrapper.__wrapped__ = wrapped
-        return wrapper
-    _update_wrapper.__doc__ = functools.update_wrapper.__doc__
-
-    def wraps(wrapped, assigned=functools.WRAPPER_ASSIGNMENTS,
-              updated=functools.WRAPPER_UPDATES):
-        return functools.partial(_update_wrapper, wrapped=wrapped,
-                                 assigned=assigned, updated=updated)
-    wraps.__doc__ = functools.wraps.__doc__
-
-else:
-    wraps = functools.wraps
-
-
-def with_metaclass(meta, *bases):
-    """Create a base class with a metaclass."""
-    # This requires a bit of explanation: the basic idea is to make a dummy
-    # metaclass for one level of class instantiation that replaces itself with
-    # the actual metaclass.
-    class metaclass(type):
-
-        def __new__(cls, name, this_bases, d):
-            if sys.version_info[:2] >= (3, 7):
-                # This version introduced PEP 560 that requires a bit
-                # of extra care (we mimic what is done by __build_class__).
-                resolved_bases = types.resolve_bases(bases)
-                if resolved_bases is not bases:
-                    d['__orig_bases__'] = bases
-            else:
-                resolved_bases = bases
-            return meta(name, resolved_bases, d)
-
-        @classmethod
-        def __prepare__(cls, name, this_bases):
-            return meta.__prepare__(name, bases)
-    return type.__new__(metaclass, 'temporary_class', (), {})
-
-
-def add_metaclass(metaclass):
-    """Class decorator for creating a class with a metaclass."""
-    def wrapper(cls):
-        orig_vars = cls.__dict__.copy()
-        slots = orig_vars.get('__slots__')
-        if slots is not None:
-            if isinstance(slots, str):
-                slots = [slots]
-            for slots_var in slots:
-                orig_vars.pop(slots_var)
-        orig_vars.pop('__dict__', None)
-        orig_vars.pop('__weakref__', None)
-        if hasattr(cls, '__qualname__'):
-            orig_vars['__qualname__'] = cls.__qualname__
-        return metaclass(cls.__name__, cls.__bases__, orig_vars)
-    return wrapper
-
-
-def ensure_binary(s, encoding='utf-8', errors='strict'):
-    """Coerce **s** to six.binary_type.
-
-    For Python 2:
-      - `unicode` -> encoded to `str`
-      - `str` -> `str`
-
-    For Python 3:
-      - `str` -> encoded to `bytes`
-      - `bytes` -> `bytes`
-    """
-    if isinstance(s, binary_type):
-        return s
-    if isinstance(s, text_type):
-        return s.encode(encoding, errors)
-    raise TypeError("not expecting type '%s'" % type(s))
-
-
-def ensure_str(s, encoding='utf-8', errors='strict'):
-    """Coerce *s* to `str`.
-
-    For Python 2:
-      - `unicode` -> encoded to `str`
-      - `str` -> `str`
-
-    For Python 3:
-      - `str` -> `str`
-      - `bytes` -> decoded to `str`
-    """
-    # Optimization: Fast return for the common case.
-    if type(s) is str:
-        return s
-    if PY2 and isinstance(s, text_type):
-        return s.encode(encoding, errors)
-    elif PY3 and isinstance(s, binary_type):
-        return s.decode(encoding, errors)
-    elif not isinstance(s, (text_type, binary_type)):
-        raise TypeError("not expecting type '%s'" % type(s))
-    return s
-
-
-def ensure_text(s, encoding='utf-8', errors='strict'):
-    """Coerce *s* to six.text_type.
-
-    For Python 2:
-      - `unicode` -> `unicode`
-      - `str` -> `unicode`
-
-    For Python 3:
-      - `str` -> `str`
-      - `bytes` -> decoded to `str`
-    """
-    if isinstance(s, binary_type):
-        return s.decode(encoding, errors)
-    elif isinstance(s, text_type):
-        return s
-    else:
-        raise TypeError("not expecting type '%s'" % type(s))
-
-
-def python_2_unicode_compatible(klass):
-    """
-    A class decorator that defines __unicode__ and __str__ methods under Python 2.
-    Under Python 3 it does nothing.
-
-    To support Python 2 and 3 with a single code base, define a __str__ method
-    returning text and apply this decorator to the class.
-    """
-    if PY2:
-        if '__str__' not in klass.__dict__:
-            raise ValueError("@python_2_unicode_compatible cannot be applied "
-                             "to %s because it doesn't define __str__()." %
-                             klass.__name__)
-        klass.__unicode__ = klass.__str__
-        klass.__str__ = lambda self: self.__unicode__().encode('utf-8')
-    return klass
-
-
-# Complete the moves implementation.
-# This code is at the end of this module to speed up module loading.
-# Turn this module into a package.
-__path__ = []  # required for PEP 302 and PEP 451
-__package__ = __name__  # see PEP 366 @ReservedAssignment
-if globals().get("__spec__") is not None:
-    __spec__.submodule_search_locations = []  # PEP 451 @UndefinedVariable
-# Remove other six meta path importers, since they cause problems. This can
-# happen if six is removed from sys.modules and then reloaded. (Setuptools does
-# this for some reason.)
-if sys.meta_path:
-    for i, importer in enumerate(sys.meta_path):
-        # Here's some real nastiness: Another "instance" of the six module might
-        # be floating around. Therefore, we can't use isinstance() to check for
-        # the six meta path importer, since the other six instance will have
-        # inserted an importer with different class.
-        if (type(importer).__name__ == "_SixMetaPathImporter" and
-                importer.name == __name__):
-            del sys.meta_path[i]
-            break
-    del i, importer
-# Finally, add the importer to the meta path import hook.
-sys.meta_path.append(_importer)
Index: .venv/Lib/site-packages/pip/_internal/utils/models.py
===================================================================
diff --git a/.venv/Lib/site-packages/pip/_internal/utils/models.py b/.venv/Lib/site-packages/pip/_internal/utils/models.py
deleted file mode 100644
--- a/.venv/Lib/site-packages/pip/_internal/utils/models.py	
+++ /dev/null	
@@ -1,39 +0,0 @@
-"""Utilities for defining models
-"""
-
-import operator
-from typing import Any, Callable, Type
-
-
-class KeyBasedCompareMixin:
-    """Provides comparison capabilities that is based on a key"""
-
-    __slots__ = ["_compare_key", "_defining_class"]
-
-    def __init__(self, key: Any, defining_class: Type["KeyBasedCompareMixin"]) -> None:
-        self._compare_key = key
-        self._defining_class = defining_class
-
-    def __hash__(self) -> int:
-        return hash(self._compare_key)
-
-    def __lt__(self, other: Any) -> bool:
-        return self._compare(other, operator.__lt__)
-
-    def __le__(self, other: Any) -> bool:
-        return self._compare(other, operator.__le__)
-
-    def __gt__(self, other: Any) -> bool:
-        return self._compare(other, operator.__gt__)
-
-    def __ge__(self, other: Any) -> bool:
-        return self._compare(other, operator.__ge__)
-
-    def __eq__(self, other: Any) -> bool:
-        return self._compare(other, operator.__eq__)
-
-    def _compare(self, other: Any, method: Callable[[Any, Any], bool]) -> bool:
-        if not isinstance(other, self._defining_class):
-            return NotImplemented
-
-        return method(self._compare_key, other._compare_key)
Index: meine_app/meine_app/GUI/ProduktionlinienScreen.py
===================================================================
diff --git a/meine_app/meine_app/GUI/ProduktionlinienScreen.py b/meine_app/meine_app/GUI/ProduktionlinienScreen.py
deleted file mode 100644
--- a/meine_app/meine_app/GUI/ProduktionlinienScreen.py	
+++ /dev/null	
@@ -1,11 +0,0 @@
-from kivy.uix.screenmanager import Screen, ScreenManager
-
-from Scrollliste import Scrollliste
-
-class ProduktionsLinienScreen(Screen):
-    def __init__(self, **kwargs):
-        super().__init__(**kwargs)
-
-        linienliste = Scrollliste(["1", "2", "4"])
-
-        self.add_widget(linienliste)
\ No newline at end of file
Index: meine_app/meine_app/GUI/login_screen.py
===================================================================
diff --git a/meine_app/meine_app/GUI/login_screen.py b/meine_app/meine_app/GUI/login_screen.py
deleted file mode 100644
--- a/meine_app/meine_app/GUI/login_screen.py	
+++ /dev/null	
@@ -1,12 +0,0 @@
-from kivy.uix.screenmanager import Screen
-
-class LoginScreen(Screen):
-    def do_login(self):
-        username = self.ids.username.text
-        password = self.ids.password.text
-
-        # Dummy authentication (just printing for now)
-        print(f"Username: {username}, Password: {password}")
-
-        # Switch to home screen
-        self.manager.current = "home"
\ No newline at end of file
Index: meine_app/meine_app/GUI/MESApp.py
===================================================================
diff --git a/meine_app/meine_app/GUI/MESApp.py b/meine_app/meine_app/GUI/MESApp.py
deleted file mode 100644
--- a/meine_app/meine_app/GUI/MESApp.py	
+++ /dev/null	
@@ -1,20 +0,0 @@
-from kivy.app import App
-from kivy.uix.screenmanager import ScreenManager
-
-from meine_app.meine_app.GUI.LoginScreen import LoginScreen
-from meine_app.meine_app.GUI.ProduktionlinienScreen import ProduktionsLinienScreen
-
-
-class MESApp(App):
-    def build(self):
-        self.__screenmanager = ScreenManager()
-        self.__screenmanager.add_widget(LoginScreen(name='login'))
-        self.__screenmanager.add_widget(ProduktionsLinienScreen(name='produktionslinienwahl'))
-
-        return self.__screenmanager
-
-    def login(self, *args):
-        self.__screenmanager.current = "produktionslinienwahl"
-
-if __name__ == '__main__':
-    MESApp().run()
\ No newline at end of file
Index: meine_app/meine_app/GUI/PrdAuftr_screen.py
===================================================================
diff --git a/meine_app/meine_app/GUI/PrdAuftr_screen.py b/meine_app/meine_app/GUI/PrdAuftr_screen.py
deleted file mode 100644
--- a/meine_app/meine_app/GUI/PrdAuftr_screen.py	
+++ /dev/null	
@@ -1,123 +0,0 @@
-import kivy
-from django.db import transaction, connection
-from kivy.app import App
-from kivy.uix.label import Label
-from kivy.uix.gridlayout import GridLayout
-from kivy.uix.textinput import TextInput
-from kivy.uix.button import Button
-from meine_app.meine_app.objects.Produktionslinie import Produktionslinie
-from meine_app.meine_app.objects.Produktionsauftrag import Produktionsauftrag
-import os
-import sys
-import django
-from meine_app.meine_app.Util import Util
-from kivy.uix.boxlayout import BoxLayout
-from meine_app.meine_app.Util import Util
-from kivy.uix.widget import Widget
-
-#BASE_DIR = Path(__file__).resolve().parent.parent.parent
-sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__))))
-os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'meine_app.meine_app.Stuff.settings')
-django.setup()
-
-
-from kivy.uix.screenmanager import Screen
-from kivy.uix.boxlayout import BoxLayout
-from kivy.uix.gridlayout import GridLayout
-from kivy.uix.label import Label
-from kivy.uix.textinput import TextInput
-from kivy.uix.button import Button
-from kivy.uix.widget import Widget
-from kivy.uix.boxlayout import BoxLayout
-from meine_app.meine_app.objects.Produktionsauftrag import Produktionsauftrag
-from meine_app.meine_app.Util import Util
-from django.db import transaction, connection
-
-
-class PrdAuftragScreen(Screen):
-    def __init__(self, **kwargs):
-        super().__init__(**kwargs)
-        self.layout = GridLayout(cols=1, padding=20, spacing=10)
-
-        self.top_grid = GridLayout(cols=2, spacing=10)
-
-        label = Label(
-            text="Produktionsauftrag",
-            font_size="24sp",
-            bold=True,
-            color=(1, 1, 1, 1),
-            size_hint=(1, None),
-            height=40,
-            halign='center',
-            valign='middle')
-        label.bind(size=lambda *args: setattr(label, 'text_size', label.size))
-
-        self.layout.add_widget(label)
-        self.top_grid.add_widget(Label(text="produktName", color=(0, 0, 0, 1)))
-        self.produktName = TextInput(multiline=False)
-        self.top_grid.add_widget(self.produktName)
-
-        self.top_grid.add_widget(Label(text="avisierteMenge"))
-        self.avisierteMenge = TextInput(multiline=False)
-        self.top_grid.add_widget(self.avisierteMenge)
-
-        self.layout.add_widget(self.top_grid)
-
-        self.submit = Button(text="Submit", size_hint=(None, None), size=(100, 40))
-        self.submit.bind(on_press=self.press)
-
-        button_box = BoxLayout(orientation='horizontal')
-        button_box.add_widget(Widget())
-        button_box.add_widget(self.submit)
-        button_box.add_widget(Widget())
-
-        self.layout.add_widget(button_box)
-        self.add_widget(self.layout)
-
-        with transaction.atomic():
-            with connection.cursor() as cursor:
-                cursor.execute("SELECT COUNT(*) FROM Auftrag;")
-                result = cursor.fetchone()
-                self.__bestellnr = result[0]
-                print(f"BEFORE PRESS DEBUG: {self.__bestellnr}")
-
-    def press(self, instance):
-        name = self.produktName.text
-        menge = self.avisierteMenge.text
-        pa = Produktionsauftrag(name, menge)
-        Util.save_to_db(pa)
-        print("Produktionsauftrag ist " + pa.__repr__())
-
-        self.produktName.text = ""
-        self.avisierteMenge.text = ""
-
-
-
-    # def press(self, instance):
-    #     name = self.produktName.text            # Timo Kleinewächte hat gesagt da muss ".text" hin
-    #     menge = self.avisierteMenge.text        # hab aber vergessen warum
-    #
-    #     pa : Produktionsauftrag = Produktionsauftrag(name, menge) #initialiseirt Obj mit parametern ausm dings
-    #     Util.save_to_db(pa) # pakct das in Auftrag Datenbank
-    #
-    #
-    #     # print to screen -> zum testen maybe noch brauchbar
-    #
-    #
-    #     #self.top_grid.add_widget(Label(text=f'obj: {pa.__repr__()}'))
-    #
-    #     print("Produktionsauftrag ist " + pa.__repr__())
-
-
-
-        self.produktName.text= ""
-        self.avisierteMenge.text= ""
-        #self.nameDrei.text =""
-
-class PrdAuftragGui(App):
-    def build(self):
-        return PrdAuftragScreen()
-
-
-if __name__ == "__main__":
-    PrdAuftragGui().run()
Index: meine_app/meine_app/GUI/Scrollliste.py
===================================================================
diff --git a/meine_app/meine_app/GUI/Scrollliste.py b/meine_app/meine_app/GUI/Scrollliste.py
deleted file mode 100644
--- a/meine_app/meine_app/GUI/Scrollliste.py	
+++ /dev/null	
@@ -1,42 +0,0 @@
-from kivy.uix.boxlayout import BoxLayout
-from kivy.uix.button import Button
-from kivy.uix.scrollview import ScrollView
-
-""
-class Scrollliste(ScrollView):
-    def __init__(self, einträge, beiAuswahl = None, farbe_ausgewählt = (1, 1, 1, 0.5), farbe_nicht_ausgewählt=(1, 1, 1, 0.5), **kwargs):
-        super(Scrollliste, self).__init__(**kwargs)
-
-        self.__beiAuswahl = beiAuswahl
-        self.__ausgewählt = None
-
-        self.__farbe_ausgewählt = farbe_ausgewählt
-        self.__farbe_nicht_ausgewählt = farbe_nicht_ausgewählt
-
-        boxlayout = BoxLayout(orientation="vertical")
-
-        for eintrag in einträge:
-            button = Button(text=eintrag, background_color=farbe_nicht_ausgewählt)
-            button.bind(on_press=self._neueAuswahl)
-            boxlayout.add_widget(button)
-
-        self.add_widget(boxlayout)
-
-
-    def get_ausgewählt(self):
-        return self.__ausgewählt
-
-    def add_eintrag(self, eintrag):
-        self.children[0].add_widget(eintrag)
-
-    def _neueAuswahl(self, button):
-        self.__ausgewählt = button.text
-
-        for btn in self.children[0].children:
-            btn.background_color = self.__farbe_nicht_ausgewählt
-
-        button.background_color = self.__farbe_ausgewählt
-
-        if self.__beiAuswahl:
-            self.__beiAuswahl()
-
Index: meine_app/meine_app/GUI/LoginScreen.py
===================================================================
diff --git a/meine_app/meine_app/GUI/LoginScreen.py b/meine_app/meine_app/GUI/LoginScreen.py
deleted file mode 100644
--- a/meine_app/meine_app/GUI/LoginScreen.py	
+++ /dev/null	
@@ -1,17 +0,0 @@
-from tkinter import Button
-
-from kivy.app import App
-from kivy.uix.screenmanager import Screen
-from kivy.uix.button import Button
-
-
-class LoginScreen(Screen):
-    def __init__(self, **kwargs):
-            super(LoginScreen, self).__init__(**kwargs)
-
-            button = Button(text='Klick mich!')
-            button.bind(on_press=self.login)
-            self.add_widget(button)
-
-    def login(self, *args):
-        App.get_running_app().login()
\ No newline at end of file
Index: meine_app/meine_app/GUI/main.py
===================================================================
diff --git a/meine_app/meine_app/GUI/main.py b/meine_app/meine_app/GUI/main.py
deleted file mode 100644
--- a/meine_app/meine_app/GUI/main.py	
+++ /dev/null	
@@ -1,24 +0,0 @@
-from kivymd.app import *
-from kivy.uix.screenmanager import ScreenManager
-from kivy.lang import Builder
-from login_screen import LoginScreen
-from home_screen import HomeScreen
-from PrdAuftr_screen import PrdAuftragScreen
-from meine_app.meine_app.test import ScrollButtonApp
-# Load .kv files
-Builder.load_file("../kv/login_screen.kv")
-Builder.load_file("../kv/home_screen.kv")
-#Builder.load_file("../kv/PrdAuftrGui.kv")
-
-class MainApp(MDApp):
-    def build(self):                                                                                                        
-        sm = ScreenManager()
-        sm.add_widget(LoginScreen(name="login"))
-        sm.add_widget(HomeScreen(name="home"))
-        sm.add_widget(PrdAuftragScreen(name="prdauftrag"))
-        #sm.add_widget(ScrollButtonApp(name="prdauftragView"))
-
-        return sm
-
-if __name__ == "__main__":
-    MainApp().run()
\ No newline at end of file
Index: meine_app/meine_app/GUI/home_screen.py
===================================================================
diff --git a/meine_app/meine_app/GUI/home_screen.py b/meine_app/meine_app/GUI/home_screen.py
deleted file mode 100644
--- a/meine_app/meine_app/GUI/home_screen.py	
+++ /dev/null	
@@ -1,58 +0,0 @@
-from kivy.uix.screenmanager import Screen
-from kivymd.uix.menu import MDDropdownMenu
-from kivy.metrics import dp
-from meine_app.meine_app.GUI.PrdAuftr_screen import *
-from kivymd.app import MDApp
-from meine_app.meine_app.test import ScrollButtonApp
-
-class HomeScreen(Screen):
-    def __init__(self, **kwargs):
-        super().__init__(**kwargs)
-        self.menu1 = None
-        self.menu2 = None
-    def on_kv_post(self, base_widget):
-        prod_items = [
-            {"viewclass": "OneLineListItem", "text": "Add", "on_release": lambda: self.select_prod_option("Add")},
-            {"viewclass": "OneLineListItem", "text": "View", "on_release": lambda: self.select_prod_option("View")}         
-            ]
-        self.prod_menu = MDDropdownMenu(
-            caller=self.ids.prod_menu_field,
-            items=prod_items,
-            width_mult=3,
-            max_height=dp(150),
-        )
-
-        order_items = [
-            {"viewclass": "OneLineListItem", "text": "Add", "on_release": lambda: self.select_order_option("Add")},
-            {"viewclass": "OneLineListItem", "text": "View", "on_release": lambda: self.select_order_option("View")},
-        ]
-        self.order_menu = MDDropdownMenu(
-            caller=self.ids.order_menu_field,
-            items=order_items,
-            width_mult=3,
-            max_height=dp(150),
-        )
-
-    def open_prod_menu(self):
-        self.prod_menu.open()
-
-    def open_order_menu(self):
-        self.order_menu.open()
-
-    def select_prod_option(self, option):
-        self.ids.prod_menu_field.text = option
-        self.prod_menu.dismiss()
-        print(f"Production Line Option Selected: {option}")
-
-        print(option)
-        # Add logic here — open new screen, show popup, etc.
-
-    def select_order_option(self, option):
-        self.ids.order_menu_field.text = option
-        self.order_menu.dismiss()
-        print(f"Order Option Selected: {option}")
-        if option == "Add":
-            self.manager.current = "prdauftrag"
-        if option == "View":
-            self.manager.current = "prdauftragView"
-        # Add logic here too
Index: meine_app/meine_app/Stuff/urls.py
===================================================================
diff --git a/meine_app/meine_app/Stuff/urls.py b/meine_app/meine_app/Stuff/urls.py
deleted file mode 100644
--- a/meine_app/meine_app/Stuff/urls.py	
+++ /dev/null	
@@ -1,22 +0,0 @@
-"""
-URL configuration for meine_app project.
-
-The `urlpatterns` list routes URLs to views. For more information please see:
-    https://docs.djangoproject.com/en/5.2/topics/http/urls/
-Examples:
-Function views
-    1. Add an import:  from my_app import views
-    2. Add a URL to urlpatterns:  path('', views.home, name='home')
-Class-based views
-    1. Add an import:  from other_app.views import Home
-    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
-Including another URLconf
-    1. Import the include() function: from django.urls import include, path
-    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
-"""
-from django.contrib import admin
-from django.urls import path
-
-urlpatterns = [
-    path('admin/', admin.site.urls),
-]
Index: meine_app/meine_app/Stuff/wsgi.py
===================================================================
diff --git a/meine_app/meine_app/Stuff/wsgi.py b/meine_app/meine_app/Stuff/wsgi.py
deleted file mode 100644
--- a/meine_app/meine_app/Stuff/wsgi.py	
+++ /dev/null	
@@ -1,16 +0,0 @@
-"""
-WSGI config for meine_app project.
-
-It exposes the WSGI callable as a module-level variable named ``application``.
-
-For more information on this file, see
-https://docs.djangoproject.com/en/5.2/howto/deployment/wsgi/
-"""
-
-import os
-
-from django.core.wsgi import get_wsgi_application
-
-os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'meine_app.settings')
-
-application = get_wsgi_application()
Index: meine_app/meine_app/Stuff/asgi.py
===================================================================
diff --git a/meine_app/meine_app/Stuff/asgi.py b/meine_app/meine_app/Stuff/asgi.py
deleted file mode 100644
--- a/meine_app/meine_app/Stuff/asgi.py	
+++ /dev/null	
@@ -1,16 +0,0 @@
-"""
-ASGI config for meine_app project.
-
-It exposes the ASGI callable as a module-level variable named ``application``.
-
-For more information on this file, see
-https://docs.djangoproject.com/en/5.2/howto/deployment/asgi/
-"""
-
-import os
-
-from django.core.asgi import get_asgi_application
-
-os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'meine_app.settings')
-
-application = get_asgi_application()
Index: meine_app/meine_app/Stuff/settings.py
===================================================================
diff --git a/meine_app/meine_app/Stuff/settings.py b/meine_app/meine_app/Stuff/settings.py
deleted file mode 100644
--- a/meine_app/meine_app/Stuff/settings.py	
+++ /dev/null	
@@ -1,132 +0,0 @@
-"""
-Django settings for meine_app project.
-
-Generated by 'django-admin startproject' using Django 5.2.1.
-
-For more information on this file, see
-https://docs.djangoproject.com/en/5.2/topics/settings/
-
-For the full list of settings and their values, see
-https://docs.djangoproject.com/en/5.2/ref/settings/
-"""
-
-from pathlib import Path
-
-# Build paths inside the project like this: BASE_DIR / 'subdir'.
-BASE_DIR = Path(__file__).resolve().parent.parent.parent
-
-
-# Quick-start development settings - unsuitable for production
-# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/
-
-# SECURITY WARNING: keep the secret key used in production secret!
-SECRET_KEY = 'django-insecure-$#c8c7#j_nt8&_ueht^9=ds+uv%ij58@%!fuwa#vxdf@$vts+f'
-
-# SECURITY WARNING: don't run with debug turned on in production!
-DEBUG = True
-
-ALLOWED_HOSTS = []
-
-
-# Application definition
-
-INSTALLED_APPS = [
-    'django.contrib.admin',
-    'django.contrib.auth',
-    'django.contrib.contenttypes',
-    'django.contrib.sessions',
-    'django.contrib.messages',
-    'django.contrib.staticfiles',
-]
-
-MIDDLEWARE = [
-    'django.middleware.security.SecurityMiddleware',
-    'django.contrib.sessions.middleware.SessionMiddleware',
-    'django.middleware.common.CommonMiddleware',
-    'django.middleware.csrf.CsrfViewMiddleware',
-    'django.contrib.auth.middleware.AuthenticationMiddleware',
-    'django.contrib.messages.middleware.MessageMiddleware',
-    'django.middleware.clickjacking.XFrameOptionsMiddleware',
-]
-
-ROOT_URLCONF = 'meine_app.urls'
-
-TEMPLATES = [
-    {
-        'BACKEND': 'django.template.backends.django.DjangoTemplates',
-        'DIRS': [],
-        'APP_DIRS': True,
-        'OPTIONS': {
-            'context_processors': [
-                'django.template.context_processors.request',
-                'django.contrib.auth.context_processors.auth',
-                'django.contrib.messages.context_processors.messages',
-            ],
-        },
-    },
-]
-
-WSGI_APPLICATION = 'meine_app.wsgi.application'
-
-
-# Database
-# https://docs.djangoproject.com/en/5.2/ref/settings/#databases
-
-DATABASES = {
-    'default': {
-        'ENGINE': 'django.db.backends.sqlite3',
-        'NAME': BASE_DIR / 'db.sqlite3',
-    }
-}
-
-
-# Password validation
-# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators
-
-AUTH_PASSWORD_VALIDATORS = [
-    {
-        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
-    },
-    {
-        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
-    },
-    {
-        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
-    },
-    {
-        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
-    },
-]
-
-
-# Internationalization
-# https://docs.djangoproject.com/en/5.2/topics/i18n/
-
-LANGUAGE_CODE = 'en-us'
-
-TIME_ZONE = 'UTC'
-
-USE_I18N = True
-
-USE_TZ = True
-
-
-# Static files (CSS, JavaScript, Images)
-# https://docs.djangoproject.com/en/5.2/howto/static-files/
-
-STATIC_URL = 'static/'
-
-# Default primary key field type
-# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field
-
-DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
-INSTALLED_APPS = [
-    'django.contrib.admin',
-    'django.contrib.auth',
-    'django.contrib.contenttypes',
-    'django.contrib.sessions',
-    'django.contrib.messages',
-    'django.contrib.staticfiles',
-    # deine eigenen Apps hier
-    'meine_app',
-]
\ No newline at end of file
Index: meine_app/meine_app/GUI.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/meine_app/meine_app/GUI.py b/meine_app/meine_app/GUI.py
new file mode 100644
--- /dev/null	(date 1748208838859)
+++ b/meine_app/meine_app/GUI.py	(date 1748208838859)
@@ -0,0 +1,118 @@
+import kivy
+from django.db import transaction, connection
+from kivy.app import App
+from kivy.uix.label import Label
+from kivy.uix.gridlayout import GridLayout
+from kivy.uix.textinput import TextInput
+from kivy.uix.button import Button
+from Produktionslinie import Produktionslinie
+from Produktionsauftrag import Produktionsauftrag
+import os
+import sys
+import django
+from Util import Util
+
+from meine_app.meine_app.Util import Util
+
+
+sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__))))
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'meine_app.meine_app.settings')
+django.setup()
+
+
+class gridLayOut(GridLayout):
+    #init infinite keywords
+    def __init__(self, **kwargs):
+        #call constructer
+        super(gridLayOut, self).__init__(**kwargs)
+
+        #cols
+        self.cols = 1
+        # überschrift
+
+
+
+        self.top_grid = GridLayout()
+        self.top_grid.cols = 2
+
+
+        self.top_grid.add_widget(Label(text="überschrift"))
+        self.ueberschrift = Label()
+        self.top_grid.add_widget(self.ueberschrift)
+
+        self.top_grid.add_widget(Label(text=""))
+        self.dummy = Label()
+        self.top_grid.add_widget(self.dummy)
+
+        # def __init__(self, produktName : str, avisierteMenge : int):
+
+        # add widget
+        self.top_grid.add_widget(Label(text="produktName --> string"))
+        self.produktName = TextInput(multiline=False)
+        self.top_grid.add_widget(self.produktName)
+
+        self.top_grid.add_widget(Label(text="avisierteMenge  ---> Integer"))
+        self.avisierteMenge = TextInput(multiline=False)
+        self.top_grid.add_widget(self.avisierteMenge)
+
+
+        # blauch nich mehr
+        # self.top_grid.add_widget(Label(text="drittes widget"))
+        # self.nameDrei = TextInput(multiline=False)
+        # self.top_grid.add_widget(self.nameDrei)
+
+
+        #add sub grid to thingy
+        self.add_widget(self.top_grid)
+
+        #Button
+        self.submit = Button(text="submit")
+        self.submit.bind(on_press=self.press)
+        self.add_widget(self.submit)
+
+        self.commit_button = Button(text="In Datenbank speichern")
+        with transaction.atomic():
+            with connection.cursor() as cursor:
+                cursor.execute("SELECT COUNT(*) FROM Auftrag;")
+                result = cursor.fetchone()
+                self.__bestellnr = result[0]
+            print(
+                f" BEFORE PRESS DEBUG: {self.__bestellnr}")
+
+
+    def press(self, instance):
+        name = self.produktName.text
+        menge = self.avisierteMenge.text
+
+        pa : Produktionsauftrag = Produktionsauftrag(name, menge)
+        Util.save_to_db(pa)
+
+
+        # print to screen -> zum testen maybe noch brauchbar
+
+
+        self.top_grid.add_widget(Label(text=f'obj: {pa.__repr__()}'))
+
+        print("Produktionsauftrag ist " + pa.__repr__())
+        with transaction.atomic():
+            with connection.cursor() as cursor:
+                #cursor.execute("COMMIT;")
+                cursor.execute("SELECT COUNT(*) FROM Auftrag;")
+
+                result = cursor.fetchone()
+                self.__bestellnr = result[0]
+            print(
+                f"AFTER PRESS DEBUG: {self.__bestellnr}")
+
+
+        self.produktName.text= ""
+        self.avisierteMenge.text= ""
+        #self.nameDrei.text =""
+
+class MyApp(App):
+    def build(self):
+        return gridLayOut()
+
+
+if __name__ == "__main__":
+    MyApp().run()
Index: meine_app/meine_app/asgi.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/meine_app/meine_app/asgi.py b/meine_app/meine_app/asgi.py
new file mode 100644
--- /dev/null	(date 1748208838863)
+++ b/meine_app/meine_app/asgi.py	(date 1748208838863)
@@ -0,0 +1,16 @@
+"""
+ASGI config for meine_app project.
+
+It exposes the ASGI callable as a module-level variable named ``application``.
+
+For more information on this file, see
+https://docs.djangoproject.com/en/5.2/howto/deployment/asgi/
+"""
+
+import os
+
+from django.core.asgi import get_asgi_application
+
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'meine_app.settings')
+
+application = get_asgi_application()
Index: meine_app/meine_app/urls.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/meine_app/meine_app/urls.py b/meine_app/meine_app/urls.py
new file mode 100644
--- /dev/null	(date 1748208838863)
+++ b/meine_app/meine_app/urls.py	(date 1748208838863)
@@ -0,0 +1,22 @@
+"""
+URL configuration for meine_app project.
+
+The `urlpatterns` list routes URLs to views. For more information please see:
+    https://docs.djangoproject.com/en/5.2/topics/http/urls/
+Examples:
+Function views
+    1. Add an import:  from my_app import views
+    2. Add a URL to urlpatterns:  path('', views.home, name='home')
+Class-based views
+    1. Add an import:  from other_app.views import Home
+    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
+Including another URLconf
+    1. Import the include() function: from django.urls import include, path
+    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
+"""
+from django.contrib import admin
+from django.urls import path
+
+urlpatterns = [
+    path('admin/', admin.site.urls),
+]
Index: meine_app/meine_app/wsgi.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/meine_app/meine_app/wsgi.py b/meine_app/meine_app/wsgi.py
new file mode 100644
--- /dev/null	(date 1748208838864)
+++ b/meine_app/meine_app/wsgi.py	(date 1748208838864)
@@ -0,0 +1,16 @@
+"""
+WSGI config for meine_app project.
+
+It exposes the WSGI callable as a module-level variable named ``application``.
+
+For more information on this file, see
+https://docs.djangoproject.com/en/5.2/howto/deployment/wsgi/
+"""
+
+import os
+
+from django.core.wsgi import get_wsgi_application
+
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'meine_app.settings')
+
+application = get_wsgi_application()
Index: meine_app/meine_app/settings.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/meine_app/meine_app/settings.py b/meine_app/meine_app/settings.py
new file mode 100644
--- /dev/null	(date 1748208838863)
+++ b/meine_app/meine_app/settings.py	(date 1748208838863)
@@ -0,0 +1,132 @@
+"""
+Django settings for meine_app project.
+
+Generated by 'django-admin startproject' using Django 5.2.1.
+
+For more information on this file, see
+https://docs.djangoproject.com/en/5.2/topics/settings/
+
+For the full list of settings and their values, see
+https://docs.djangoproject.com/en/5.2/ref/settings/
+"""
+
+from pathlib import Path
+
+# Build paths inside the project like this: BASE_DIR / 'subdir'.
+BASE_DIR = Path(__file__).resolve().parent.parent
+
+
+# Quick-start development settings - unsuitable for production
+# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/
+
+# SECURITY WARNING: keep the secret key used in production secret!
+SECRET_KEY = 'django-insecure-$#c8c7#j_nt8&_ueht^9=ds+uv%ij58@%!fuwa#vxdf@$vts+f'
+
+# SECURITY WARNING: don't run with debug turned on in production!
+DEBUG = True
+
+ALLOWED_HOSTS = []
+
+
+# Application definition
+
+INSTALLED_APPS = [
+    'django.contrib.admin',
+    'django.contrib.auth',
+    'django.contrib.contenttypes',
+    'django.contrib.sessions',
+    'django.contrib.messages',
+    'django.contrib.staticfiles',
+]
+
+MIDDLEWARE = [
+    'django.middleware.security.SecurityMiddleware',
+    'django.contrib.sessions.middleware.SessionMiddleware',
+    'django.middleware.common.CommonMiddleware',
+    'django.middleware.csrf.CsrfViewMiddleware',
+    'django.contrib.auth.middleware.AuthenticationMiddleware',
+    'django.contrib.messages.middleware.MessageMiddleware',
+    'django.middleware.clickjacking.XFrameOptionsMiddleware',
+]
+
+ROOT_URLCONF = 'meine_app.urls'
+
+TEMPLATES = [
+    {
+        'BACKEND': 'django.template.backends.django.DjangoTemplates',
+        'DIRS': [],
+        'APP_DIRS': True,
+        'OPTIONS': {
+            'context_processors': [
+                'django.template.context_processors.request',
+                'django.contrib.auth.context_processors.auth',
+                'django.contrib.messages.context_processors.messages',
+            ],
+        },
+    },
+]
+
+WSGI_APPLICATION = 'meine_app.wsgi.application'
+
+
+# Database
+# https://docs.djangoproject.com/en/5.2/ref/settings/#databases
+
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': BASE_DIR / 'db.sqlite3',
+    }
+}
+
+
+# Password validation
+# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators
+
+AUTH_PASSWORD_VALIDATORS = [
+    {
+        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
+    },
+    {
+        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
+    },
+    {
+        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
+    },
+    {
+        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
+    },
+]
+
+
+# Internationalization
+# https://docs.djangoproject.com/en/5.2/topics/i18n/
+
+LANGUAGE_CODE = 'en-us'
+
+TIME_ZONE = 'UTC'
+
+USE_I18N = True
+
+USE_TZ = True
+
+
+# Static files (CSS, JavaScript, Images)
+# https://docs.djangoproject.com/en/5.2/howto/static-files/
+
+STATIC_URL = 'static/'
+
+# Default primary key field type
+# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field
+
+DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
+INSTALLED_APPS = [
+    'django.contrib.admin',
+    'django.contrib.auth',
+    'django.contrib.contenttypes',
+    'django.contrib.sessions',
+    'django.contrib.messages',
+    'django.contrib.staticfiles',
+    # deine eigenen Apps hier
+    'meine_app',
+]
\ No newline at end of file
Index: meine_app/meine_app/Produktionslinie.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/meine_app/meine_app/Produktionslinie.py b/meine_app/meine_app/Produktionslinie.py
new file mode 100644
--- /dev/null	(date 1748208838861)
+++ b/meine_app/meine_app/Produktionslinie.py	(date 1748208838861)
@@ -0,0 +1,41 @@
+
+from Produktionsauftrag import *
+import django
+import os
+
+class Produktionslinie:
+    os.environ.setdefault('DJANGO_SETTINGS_MODULE', '.meine_app\meine_app\settings.py')  # <- Anpassen!
+    django.setup()
+    def __init__(self, name : str):
+        self.__name = name
+        self.__produktionsaufträge = []
+
+
+    def getLinienName(self):
+        return self.__name
+    def add_auftrag(self,auftrag : Produktionsauftrag):
+
+        if auftrag in self.__produktionsaufträge:
+            raise ValueError(f"'{auftrag.getProduktName()}' existiert bereits.")
+
+        if auftrag.getAvisierteMenge() <= 0:
+            raise Exception('menge darf nicht negativ sein')
+        self.__produktionsaufträge.append(auftrag)
+
+
+    def get_auftrag(self)->str:
+        return self.__produktionsaufträge
+
+
+    def getAufträge(self):
+        return self.__produktionsaufträge
+
+
+
+
+
+
+
+
+    def __eq__(self, other):
+        return self.__name == other.__name
Index: meine_app/meine_app/Produktionsauftrag.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/meine_app/meine_app/Produktionsauftrag.py b/meine_app/meine_app/Produktionsauftrag.py
new file mode 100644
--- /dev/null	(date 1748208838861)
+++ b/meine_app/meine_app/Produktionsauftrag.py	(date 1748208838861)
@@ -0,0 +1,124 @@
+from django.db import connection, transaction
+import os
+import sys
+import django
+import os
+import django
+
+# Konfiguriere die Django-Einstellungen
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'meine_app.meine_app.settings')
+
+# Initialisiere Django
+django.setup()
+
+class Produktionsauftrag:
+
+
+    #brauch ich maybe nochmal
+    #_SQL_COUNT_QUERY = """SELECT COUNT(*) from Auftrag;"""
+
+    def __init__(self, produktName : str, avisierteMenge : int):
+        self.__produktName = produktName
+        self.__menge = 0
+        self.__status = "created"
+        self.__avisierteMenge = avisierteMenge
+        self.__linienID = None
+
+        try:
+            with transaction.atomic():
+                with connection.cursor() as cursor:
+                    cursor.execute("SELECT COUNT(*) FROM Auftrag;")
+                    result = cursor.fetchone()
+                    self.__bestellnr = result[0]
+            print(
+                f"DEBUG: {self.__bestellnr}")
+        except Exception as e:
+            print(e)
+            print(
+                f"bla bla bla nich erfolgreich")
+
+            #self.__sql_insert_query = """INSERT INTO Auftrag (BestellNr, Produktname, Menge, Status, AvisierteMenge, LinienID) VALUES (?, ?, ?, ?, ?, ?);"""
+
+
+
+
+    # hab in Util klasse rein gepackt wenn das geht löschen @nüchternes ich
+
+    # def writeDB(self):
+    #
+    #     values_to_insert = (
+    #         self.getBestellnr(),
+    #         self.getProduktName(),
+    #         self.getMenge(),
+    #         self.getStatus(),
+    #         self.getAvisierteMenge(),
+    #         self.getLinienID(),
+    #     )
+    #
+    #     try:
+    #         with transaction.atomic():
+    #             with connection.cursor() as cursor:
+    #                 cursor.execute(self._SQL_INSERT_QUERY, values_to_insert)
+    #
+    #         print(
+    #             f"Daten für Auftrag {self.getBestellnr() or 'ohne BestellNr'} erfolgreich über Raw SQL in Datenbank geschrieben.")
+    #
+    #     except Exception as e:
+    #         print(f"FEHLER: Konnte Auftrag ({self.getProduktName()}, {self.getAvisierteMenge()}) nicht in Datenbank schreiben: {e}")
+
+
+
+
+    def start(self):
+        self.__status = "in Production"
+    def finish(self):
+        self.__status = "completed"
+
+
+
+    def produce_units(self, menge : int):
+        for i in range(menge):
+            self.__menge = self.__menge + True
+
+#############################           getter setter               ####################################################
+
+
+
+    def getAvisierteMenge(self):
+        return self.__avisierteMenge
+
+    def getProduktName(self):
+        return self.__produktName
+
+    def getStatus(self):
+        return self.__status
+
+    def getLinienID(self):
+        return self.__linienID
+
+    def getBestellnr(self):
+        return self.__bestellnr
+
+    def getMenge(self):
+        return self.__menge
+    #-------------------------------        setter          ---------------------------
+
+
+    def setAvisierteMenge(self, avisierteMenge):
+        if avisierteMenge <= 0:
+            self.__avisierteMenge = avisierteMenge
+        else:
+            raise ValueError(f"menge darf nich negativ sein!!!!!!!!!")
+    def setLinienID(self, linienID):
+        self.__linienID = linienID
+    def __eq__(self, other):
+        return self.__produktName == other.__produktName
+
+    def __repr__(self):
+        return str(f"Produktionsauftrag("
+                f"bestellnr={self.__bestellnr}, "
+                f"produktName={self.__produktName}, "
+                f"menge={self.__menge}, "
+                f"status={self.__status}, "
+                f"avisierteMenge={self.__avisierteMenge}, "
+                f"linienID={self.__linienID})")
Index: meine_app/meine_app/objects/Produktionsauftrag.py
===================================================================
diff --git a/meine_app/meine_app/objects/Produktionsauftrag.py b/meine_app/meine_app/objects/Produktionsauftrag.py
deleted file mode 100644
--- a/meine_app/meine_app/objects/Produktionsauftrag.py	
+++ /dev/null	
@@ -1,148 +0,0 @@
-from django.db import connection, transaction
-import os
-import sys
-import django
-import os
-import django
-
-# Konfiguriere die Django-Einstellungen
-os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'meine_app.meine_app.Stuff.settings')
-
-# Initialisiere Django
-django.setup()
-
-
-
-    #brauch ich maybe nochmal
-    #_SQL_COUNT_QUERY = """SELECT COUNT(*) from Auftrag;"""
-
-class Produktionsauftrag:
-    def __init__(self, produktName: str, avisierteMenge: int):
-        self.__produktName = produktName
-        self.__menge = 0
-        self.__status = "created"
-        self.__avisierteMenge = avisierteMenge
-
-        # Existing BestellNr generation logic for *new* objects
-        try:
-            with transaction.atomic():
-                with connection.cursor() as cursor:
-                    cursor.execute("SELECT COUNT(*) FROM Auftrag;")
-                    result = cursor.fetchone()
-                    self.__bestellnr = result[0] + 1  # Increment for new
-            print(f"DEBUG: New BestellNr generated: {self.__bestellnr}")
-        except Exception as e:
-            print(e)
-            print(f"Fehler beim Generieren der BestellNr.")
-            self.__bestellnr = -1  # Handle error
-
-        self.__linienID = None
-        self.__db_id = None  # Initialize for objects created this way
-
-
-    @classmethod
-    def from_db_row(cls, row_data):
-        """
-        Creates a Produktionsauftrag object from a database row.
-        Assumes row_data is a tuple/list matching the SELECT query order.
-        """
-        # Map row_data indices to constructor arguments or directly to attributes
-        # IMPORTANT: Adjust indices based on your SELECT query
-        auftrag = cls(
-            produktName=row_data[1],  # Assuming produktName is at index 2
-            avisierteMenge=row_data[4]  # Assuming avisierteMenge is at index 3
-        )
-        # Directly set other attributes that are loaded from DB
-         # Assuming id is at index 0
-        auftrag.__bestellnr = row_data[0]  # Assuming BestellNr is at index 1
-        auftrag.__menge = row_data[2]  # Assuming menge is at index 4
-        auftrag.__status = row_data[3]  # Assuming status is at index 5
-        auftrag.__linienID = row_data[4]  # Assuming linienID is at index 6
-
-        return auftrag
-
-        #self.__sql_insert_query = """INSERT INTO Auftrag (BestellNr, Produktname, Menge, Status, AvisierteMenge, LinienID) VALUES (?, ?, ?, ?, ?, ?);"""
-
-
-
-
-    # hab in Util klasse rein gepackt wenn das geht löschen @nüchternes ich
-
-    # def writeDB(self):
-    #
-    #     values_to_insert = (
-    #         self.getBestellnr(),
-    #         self.getProduktName(),
-    #         self.getMenge(),
-    #         self.getStatus(),
-    #         self.getAvisierteMenge(),
-    #         self.getLinienID(),
-    #     )
-    #
-    #     try:
-    #         with transaction.atomic():
-    #             with connection.cursor() as cursor:
-    #                 cursor.execute(self._SQL_INSERT_QUERY, values_to_insert)
-    #
-    #         print(
-    #             f"Daten für Auftrag {self.getBestellnr() or 'ohne BestellNr'} erfolgreich über Raw SQL in Datenbank geschrieben.")
-    #
-    #     except Exception as e:
-    #         print(f"FEHLER: Konnte Auftrag ({self.getProduktName()}, {self.getAvisierteMenge()}) nicht in Datenbank schreiben: {e}")
-
-
-
-
-    def start(self):
-        self.__status = "in Production"
-    def finish(self):
-        self.__status = "completed"
-
-
-
-    def produce_units(self, menge : int):
-        for i in range(menge):
-            self.__menge = self.__menge + True
-
-#############################           getter setter               ####################################################
-
-
-
-    def getAvisierteMenge(self):
-        return self.__avisierteMenge
-
-    def getProduktName(self):
-        return self.__produktName
-
-    def getStatus(self):
-        return self.__status
-
-    def getLinienID(self):
-        return self.__linienID
-
-    def getBestellnr(self):
-        return self.__bestellnr
-
-    def getMenge(self):
-        return self.__menge
-    #-------------------------------        setter          ---------------------------
-
-
-    def setAvisierteMenge(self, avisierteMenge):
-        if avisierteMenge <= 0:
-            self.__avisierteMenge = avisierteMenge
-        else:
-            raise ValueError(f"menge darf nich negativ sein!!!!!!!!!")
-    def setLinienID(self, linienID):
-        self.__linienID = linienID
-    def __eq__(self, other):
-        return self.__produktName == other.__produktName
-
-    def __repr__(self):
-        return str(f"Produktionsauftrag("
-                f"bestellnr={self.__bestellnr}, "
-                f"produktName={self.__produktName}, "
-                f"menge={self.__menge}, "
-                f"status={self.__status}, "
-                f"avisierteMenge={self.__avisierteMenge}, "
-                f"linienID={self.__linienID})")
Index: meine_app/meine_app/objects/Produktionslinie.py
===================================================================
diff --git a/meine_app/meine_app/objects/Produktionslinie.py b/meine_app/meine_app/objects/Produktionslinie.py
deleted file mode 100644
--- a/meine_app/meine_app/objects/Produktionslinie.py	
+++ /dev/null	
@@ -1,42 +0,0 @@
-
-import django
-import os
-from meine_app.meine_app.objects.Produktionsauftrag import Produktionsauftrag
-
-
-class Produktionslinie:
-    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'meine_app.meine_app.Stuff.settings')  # <- Anpassen!
-    django.setup()
-    def __init__(self, name : str):
-        self.__name = name
-        self.__produktionsaufträge = []
-
-
-    def getLinienName(self):
-        return self.__name
-    def add_auftrag(self,auftrag : Produktionsauftrag):
-
-        if auftrag in self.__produktionsaufträge:
-            raise ValueError(f"'{auftrag.getProduktName()}' existiert bereits.")
-
-        if auftrag.getAvisierteMenge() <= 0:
-            raise Exception('menge darf nicht negativ sein')
-        self.__produktionsaufträge.append(auftrag)
-
-
-    def get_auftrag(self)->str:
-        return self.__produktionsaufträge
-
-
-    def getAufträge(self):
-        return self.__produktionsaufträge
-
-
-
-
-
-
-
-
-    def __eq__(self, other):
-        return self.__name == other.__name
Index: meine_app/meine_app/Util.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/meine_app/meine_app/Util.py b/meine_app/meine_app/Util.py
--- a/meine_app/meine_app/Util.py	
+++ b/meine_app/meine_app/Util.py	(date 1748208838862)
@@ -1,6 +1,6 @@
 from django.db import connection, transaction
-from meine_app.meine_app.objects.Produktionslinie import Produktionslinie
-from meine_app.meine_app.objects.Produktionsauftrag import Produktionsauftrag
+from Produktionslinie import Produktionslinie
+from Produktionsauftrag import Produktionsauftrag
 import os
 import django
 
@@ -46,13 +46,6 @@
         SET LinienID = %s
         WHERE BestellNr = %s;
         """
-    _SQL_GET_ALL_LINIE_DATA_QUERY = """
-    SELECT * FROM Linie;
-    """
-    _SQL_GET_ALL_AUFTRAG_DATA_QUERY = """
-    SELECT * FROM Auftrag;
-    """
-
 
 
     #Speichert nh Produktionslinie in der Linie Tabelle.
@@ -139,27 +132,4 @@
         elif isinstance(obj, Produktionslinie):  # wenn prdlinie is mach das
             Util._save_produktionslinie(obj)       # warum is das obj gelb chat? - "Type 'Produktionslinie' doesn't have expected attribute 'getLinienID'"
         else:
-            print(f"FEHLER: Unbekannter Objekttyp {type(obj)} geht nich QwQ.")
-
-    @staticmethod
-    def getAuftragFromDatenbak():
-        try:
-            with transaction.atomic():
-                with connection.cursor() as cursor:
-                    cursor.execute(Util._SQL_GET_ALL_AUFTRAG_DATA_QUERY)
-                    result = cursor.fetchall()
-                    # print(result) # Debug-Ausgabe, kann entfernt werden
-                    return result
-        except Exception as e:
-            print(f"Fehler beim Abrufen der Daten aus der Datenbank: {e}")
-            # Gib eine leere Liste zurück, damit die App nicht abstürzt
-            return []
-
-    @staticmethod
-    def getLinieFromDatenbak():
-        with transaction.atomic():
-            with connection.cursor() as cursor:
-                cursor.execute(Util._SQL_GET_ALL_LINIE_DATA_QUERY)
-                result = cursor.fetchall()
-
-                return result
\ No newline at end of file
+            print(f"FEHLER: Unbekannter Objekttyp {type(obj)} geht nich QwQ.")
\ No newline at end of file
Index: meine_app/meine_app/test.py
===================================================================
diff --git a/meine_app/meine_app/test.py b/meine_app/meine_app/test.py
deleted file mode 100644
--- a/meine_app/meine_app/test.py	
+++ /dev/null	
@@ -1,50 +0,0 @@
-from kivy.app import App
-from kivy.uix.scrollview import ScrollView
-from kivy.uix.boxlayout import BoxLayout
-from kivy.uix.button import Button
-from kivy.core.window import Window
-from meine_app.meine_app.Util import Util
-class ScrollButtonApp(App):
-
-    def __init__(self, **kwargs):
-        super(ScrollButtonApp, self).__init__(**kwargs)
-        self.root = BoxLayout(orientation='vertical')
-
-        self.scroll_view = ScrollView(size_hint=(1, 1))
-
-        # Container für Buttons
-        self.button_container = BoxLayout(orientation='vertical', size_hint_y=None)
-        self.button_container.bind(minimum_height=self.button_container.setter('height'))
-
-        # Fensterhöhe zum Berechnen der Buttonhöhe (20% davon)
-        self.button_height = Window.height * 0.2
-
-    def build(self):
-
-
-        # Beispielsweise 10 Buttons
-
-        self.showAuftrag(Util.getLinieFromDatenbak())
-
-
-        self.showLinie(Util.getAuftragFromDatenbak())
-
-        self.scroll_view.add_widget(self.button_container)
-        self.root.add_widget(self.scroll_view)
-
-        return self.root
-
-    def showAuftrag(self, liste : list):
-
-        for auftrag in liste:
-            btn = Button(text=f"Auftrag: {auftrag[1]}", size_hint_y=None, height=self.button_height)
-            self.button_container.add_widget(btn)
-
-    def showLinie(self, liste : list):
-
-        for linie in liste:
-            btn = Button(text=f"Linie: {Linie[1]}", size_hint_y=None, height=self.button_height)
-            self.button_container.add_widget(btn)
-
-if __name__ == '__main__':
-    ScrollButtonApp().run()
\ No newline at end of file
Index: meine_app/meine_app/SCANASimulator.py
===================================================================
diff --git a/meine_app/meine_app/SCANASimulator.py b/meine_app/meine_app/SCANASimulator.py
deleted file mode 100644
--- a/meine_app/meine_app/SCANASimulator.py	
+++ /dev/null	
@@ -1,51 +0,0 @@
-import math
-import threading
-import time
-import random
-
-import MES
-
-class SCANASimulator:
-    def __init__(self, mes : MES, updateZeit : int, updateWahrscheinlichkeit : int, mindestProzent : int, maximalProzent : int):
-        self.__mes = mes
-        self.__updateZeit = updateZeit
-        self.__updateWahrscheinlichkeit = updateWahrscheinlichkeit
-        self.__mindestProzent = mindestProzent
-        self.__maximalProzent = maximalProzent
-
-        self.__thread = threading.Thread( target=self.__run)
-        self.__stopEvent = threading.Event()
-        self.__started = False
-
-    def start(self):
-        if self.__started:
-            raise RuntimeError("SCANASimulator is already running")
-
-        self.__started = True
-        self.__thread.start()
-
-    def __run(self):
-        while not self.__stopEvent.is_set():
-            for produktionline in self.__mes.get_produktionslinie():
-                for produktionsauftag in produktionline:
-
-                    # Produktionsauftragsmenge nur aktualiesieren, wenn Status in "in Production" und
-                    # updateWahrscheinlichkeit in dieser Runde erfüllt
-                    if produktionsauftag.get_Status() == "in Production" and random.random() < self.__updateWahrscheinlichkeit:
-                        #Prozentwert der in dieser Runde zu produzierten Einheiten in Abhängigkeit der avisierten Menge
-                        produzierendeProzent = random.uniform(self.__mindestProzent, self.__maximalProzent)
-                        produzierendeEinheiten = math.ciel( produzierendeProzent * produktionsauftag.getAvisierteMenge())
-
-                        if produktionsauftag.getMenge() + produzierendeEinheiten > produktionsauftag.getAvisierteMenge():
-                            produzierendeEinheiten = produktionsauftag.getAvisierteMenge() - produktionsauftag.getMenge()
-
-                        produktionsauftag.produce_units(produzierendeEinheiten)
-
-                        if produktionsauftag.getMenge() == produktionsauftag.getAvisierteMenge():
-                            produktionsauftag.finish()
-
-            # Warten bis zur nächsten Runden
-            time.sleep(self.__updateZeit)
-
-    def stop(self):
-        self.__stopEvent.set()
\ No newline at end of file
diff --git a/.idea/vcs.xml b/.idea/vcs.xml
deleted file mode 100644
diff --git a/.venv/Lib/site-packages/pip/_vendor/pygments/formatters/irc.py b/.venv/Lib/site-packages/pip/_vendor/pygments/formatters/irc.py
deleted file mode 100644
diff --git a/.venv/Lib/site-packages/pip/_vendor/pygments/formatters/other.py b/.venv/Lib/site-packages/pip/_vendor/pygments/formatters/other.py
deleted file mode 100644
diff --git a/.venv/Lib/site-packages/pip/_vendor/packaging/__about__.py b/.venv/Lib/site-packages/pip/_vendor/packaging/__about__.py
deleted file mode 100644
diff --git a/.venv/Lib/site-packages/pip/_vendor/resolvelib/compat/__init__.py b/.venv/Lib/site-packages/pip/_vendor/resolvelib/compat/__init__.py
deleted file mode 100644
diff --git a/.venv/Lib/site-packages/pip/_vendor/resolvelib/compat/collections_abc.py b/.venv/Lib/site-packages/pip/_vendor/resolvelib/compat/collections_abc.py
deleted file mode 100644
diff --git a/.venv/Lib/site-packages/pip/_vendor/cachecontrol/compat.py b/.venv/Lib/site-packages/pip/_vendor/cachecontrol/compat.py
deleted file mode 100644
diff --git a/.venv/Lib/site-packages/pip/_vendor/pyproject_hooks/_compat.py b/.venv/Lib/site-packages/pip/_vendor/pyproject_hooks/_compat.py
deleted file mode 100644
diff --git a/.venv/Lib/site-packages/pip/_internal/utils/encoding.py b/.venv/Lib/site-packages/pip/_internal/utils/encoding.py
deleted file mode 100644
diff --git a/.venv/Lib/site-packages/pip/_internal/utils/inject_securetransport.py b/.venv/Lib/site-packages/pip/_internal/utils/inject_securetransport.py
deleted file mode 100644
diff --git a/meine_app/meine_app/GUI/__init__.py b/meine_app/meine_app/GUI/__init__.py
deleted file mode 100644
diff --git a/meine_app/meine_app/Stuff/__init__.py b/meine_app/meine_app/Stuff/__init__.py
deleted file mode 100644
diff --git a/meine_app/meine_app/objects/__init__.py b/meine_app/meine_app/objects/__init__.py
deleted file mode 100644
diff --git a/.venv/Lib/site-packages/kivy/lib/gstplayer/_gstplayer.cp310-win_amd64.pyd b/.venv/Lib/site-packages/kivy/lib/gstplayer/_gstplayer.cp310-win_amd64.pyd
deleted file mode 100644
index e69de29bb2d1d6434b8b29ae775ad8c2e48c5391..0000000000000000000000000000000000000000
GIT binary patch
literal 0
Hc$@<O00001

diff --git a/.venv/Lib/site-packages/kivy/core/text/text_layout.cp310-win_amd64.pyd b/.venv/Lib/site-packages/kivy/core/text/text_layout.cp310-win_amd64.pyd
deleted file mode 100644
index e69de29bb2d1d6434b8b29ae775ad8c2e48c5391..0000000000000000000000000000000000000000
GIT binary patch
literal 0
Hc$@<O00001

diff --git a/.venv/Lib/site-packages/kivy/core/text/_text_sdl2.cp310-win_amd64.pyd b/.venv/Lib/site-packages/kivy/core/text/_text_sdl2.cp310-win_amd64.pyd
deleted file mode 100644
index e69de29bb2d1d6434b8b29ae775ad8c2e48c5391..0000000000000000000000000000000000000000
GIT binary patch
literal 0
Hc$@<O00001

diff --git a/.venv/Lib/site-packages/kivy/core/audio/audio_sdl2.cp310-win_amd64.pyd b/.venv/Lib/site-packages/kivy/core/audio/audio_sdl2.cp310-win_amd64.pyd
deleted file mode 100644
index e69de29bb2d1d6434b8b29ae775ad8c2e48c5391..0000000000000000000000000000000000000000
GIT binary patch
literal 0
Hc$@<O00001

diff --git a/.venv/Lib/site-packages/kivy/core/image/_img_sdl2.cp310-win_amd64.pyd b/.venv/Lib/site-packages/kivy/core/image/_img_sdl2.cp310-win_amd64.pyd
deleted file mode 100644
index e69de29bb2d1d6434b8b29ae775ad8c2e48c5391..0000000000000000000000000000000000000000
GIT binary patch
literal 0
Hc$@<O00001

diff --git a/.venv/Lib/site-packages/kivy/core/window/window_info.cp310-win_amd64.pyd b/.venv/Lib/site-packages/kivy/core/window/window_info.cp310-win_amd64.pyd
deleted file mode 100644
index e69de29bb2d1d6434b8b29ae775ad8c2e48c5391..0000000000000000000000000000000000000000
GIT binary patch
literal 0
Hc$@<O00001

diff --git a/.venv/Lib/site-packages/kivy/core/window/_window_sdl2.cp310-win_amd64.pyd b/.venv/Lib/site-packages/kivy/core/window/_window_sdl2.cp310-win_amd64.pyd
deleted file mode 100644
index e69de29bb2d1d6434b8b29ae775ad8c2e48c5391..0000000000000000000000000000000000000000
GIT binary patch
literal 0
Hc$@<O00001

diff --git a/.venv/Lib/site-packages/kivy/core/clipboard/_clipboard_sdl2.cp310-win_amd64.pyd b/.venv/Lib/site-packages/kivy/core/clipboard/_clipboard_sdl2.cp310-win_amd64.pyd
deleted file mode 100644
index e69de29bb2d1d6434b8b29ae775ad8c2e48c5391..0000000000000000000000000000000000000000
GIT binary patch
literal 0
Hc$@<O00001

diff --git a/.venv/Lib/site-packages/kivy/graphics/cgl_backend/cgl_debug.cp310-win_amd64.pyd b/.venv/Lib/site-packages/kivy/graphics/cgl_backend/cgl_debug.cp310-win_amd64.pyd
deleted file mode 100644
index e69de29bb2d1d6434b8b29ae775ad8c2e48c5391..0000000000000000000000000000000000000000
GIT binary patch
literal 0
Hc$@<O00001

diff --git a/.venv/Lib/site-packages/kivy/graphics/cgl_backend/cgl_gl.cp310-win_amd64.pyd b/.venv/Lib/site-packages/kivy/graphics/cgl_backend/cgl_gl.cp310-win_amd64.pyd
deleted file mode 100644
index e69de29bb2d1d6434b8b29ae775ad8c2e48c5391..0000000000000000000000000000000000000000
GIT binary patch
literal 0
Hc$@<O00001

diff --git a/.venv/Lib/site-packages/kivy/graphics/cgl_backend/cgl_sdl2.cp310-win_amd64.pyd b/.venv/Lib/site-packages/kivy/graphics/cgl_backend/cgl_sdl2.cp310-win_amd64.pyd
deleted file mode 100644
index e69de29bb2d1d6434b8b29ae775ad8c2e48c5391..0000000000000000000000000000000000000000
GIT binary patch
literal 0
Hc$@<O00001

diff --git a/.venv/Lib/site-packages/kivy/graphics/cgl_backend/cgl_mock.cp310-win_amd64.pyd b/.venv/Lib/site-packages/kivy/graphics/cgl_backend/cgl_mock.cp310-win_amd64.pyd
deleted file mode 100644
index e69de29bb2d1d6434b8b29ae775ad8c2e48c5391..0000000000000000000000000000000000000000
GIT binary patch
literal 0
Hc$@<O00001

diff --git a/.venv/Lib/site-packages/kivy/graphics/cgl_backend/cgl_glew.cp310-win_amd64.pyd b/.venv/Lib/site-packages/kivy/graphics/cgl_backend/cgl_glew.cp310-win_amd64.pyd
deleted file mode 100644
index e69de29bb2d1d6434b8b29ae775ad8c2e48c5391..0000000000000000000000000000000000000000
GIT binary patch
literal 0
Hc$@<O00001

diff --git a/.venv/Lib/site-packages/win32comext/axdebug/axdebug.pyd b/.venv/Lib/site-packages/win32comext/axdebug/axdebug.pyd
deleted file mode 100644
index e69de29bb2d1d6434b8b29ae775ad8c2e48c5391..0000000000000000000000000000000000000000
GIT binary patch
literal 0
Hc$@<O00001

diff --git a/meine_app/meine_app/kv/PrdAuftrGui.kv b/meine_app/meine_app/kv/PrdAuftrGui.kv
deleted file mode 100644
index ad181fad22985afdaeb40523f8225a281ca147c8..0000000000000000000000000000000000000000
GIT binary patch
literal 0
Hc$@<O00001

diff --git a/meine_app/meine_app/db.sqlite3 b/meine_app/meine_app/db.sqlite3
deleted file mode 100644
index e69de29bb2d1d6434b8b29ae775ad8c2e48c5391..0000000000000000000000000000000000000000
GIT binary patch
literal 0
Hc$@<O00001

